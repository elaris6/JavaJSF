<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
    <head>
        <title>ManagedBeans JSF</title>
    </head>
    <body>
        <h:outputLabel value="ManagedBeans CDI en JSF"/>
        <h:form id="vacanteForm">
            <!-- MENSAJES E INTERNACIONALIZACION -->
            <!-- Los literales de las etiquetas y los mensajes se tomarán de los ficheros de configuración y
            properties, según se especifica en cada uno de ellos.
            Info extendida: https://docs.oracle.com/javase/tutorial/i18n/intro/quick.html -->
            <h:messages globalOnly="true"></h:messages>

            <table>
                <tr>
                    <!-- En cada una de las etiquetas "label", en el campo "value" se indica la propertie a emplear
                    del fichero "mensajes.properties", mediante la sintaxis especificada {var['propertieName']} -->
                    <td><h:outputLabel for="nombre" value="#{msgs['vacanteForm.nombre']}"></h:outputLabel></td>
                    <td><h:inputText id="nombre" required="true" value="#{candidato.nombre}"></h:inputText></td>
                    <td><h:message for="nombre"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="apellido" value="#{msgs['vacanteForm.apellido']}"></h:outputLabel></td>
                    <td><h:inputText id="apellido" required="true" value="#{candidato.apellido}"></h:inputText></td>
                    <td><h:message for="apellido"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="salario" value="#{msgs['vacanteForm.salario']}"/></td>
                    <!-- En este caso al ser un tipo primitivo, se puede realizar la conversión directamente con un atributo
                    del "inputText", ya que el Framework es capaz de gestionar estos tipos por si mismo. -->
                    <td><h:inputText id="salario" required="true" value="#{candidato.salarioDeseado}" converter="javax.faces.Integer">
                            <!-- Validaciones directas en el xhtml -->
                            <f:validateLongRange minimum="500" maximum="5000"/>
                        </h:inputText>
                    </td>
                    <td><h:message for="salario"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="fechaNacimiento" value="#{msgs['vacanteForm.fechaNacimiento']}"></h:outputLabel></td>
                    <td><h:inputText id="fechaNacimiento" required="true" value="#{candidato.fechaNacimiento}">
                            <!-- En este caso es necesario generar un convertidor específico, ya que el tipo Date no es gestionado de manera
                            automática por el framework.
                            El convertidor se debe incluir dentro de la etiqueta del elemento XML "inputText". -->
                            <f:convertDateTime pattern="dd/MM/yyyy"></f:convertDateTime>
                        </h:inputText>
                    </td>
                    <td><h:message for="fechaNacimiento"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="codigoPostal" value="#{msgs['vacanteForm.codigoPostal']}"></h:outputLabel></td>
                    <!-- En este campo de tipo "InputText" se agregan las propiedades "immediate" para que cualquier cambio de valor
                    se refleje inmediatamente, "onchange", para que se ejecute el submit si el valor del campo se modifica,
                    y "valueChangeListener", para indicar el método que procesará el cambio. -->
                    <td><h:inputText id="codigoPostal" immediate="true" onchange="this.form.submit()" required="true"
                                     value="#{candidato.codigoPostal}" valueChangeListener="#{vacanteForm.codigoPostalListener}"></h:inputText>
                    </td>
                    <td><h:message for="codigoPostal"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="provincia" value="#{msgs['vacanteForm.provincia']}"></h:outputLabel></td>
                    <td><h:inputText id="provincia" required="true" value="#{candidato.provincia}"></h:inputText>
                    </td>
                    <td><h:message for="provincia"></h:message></td>
                </tr>
                <tr>
                    <td><h:outputLabel for="ciudad" value="#{msgs['vacanteForm.ciudad']}"></h:outputLabel></td>
                    <td><h:inputText id="ciudad" required="true" value="#{candidato.ciudad}"></h:inputText>
                    </td>
                    <td><h:message for="ciudad"></h:message></td>
                </tr>
            </table>

            <table>
                <tr>
                    <td>
                        <!-- Se genera un componente al que se asignará un atributo de tipo "actionListener", que permitirá
                        ocular o mostrar dicho componente en función de una lógica determinada, que estará en el bean de back. -->
                        <h:commandLink actionListener="#{vacanteForm.ocultarComentario}" immediate="true"
                                       rendered="#{!vacanteForm.comentarioEnviado}" value="#{msgs['vacanteForm.mostrar']}" />
                        <h:commandLink actionListener="#{vacanteForm.ocultarComentario}" immediate="true"
                                       rendered="#{vacanteForm.comentarioEnviado}" value="#{msgs['vacanteForm.ocultar']}" />
                    </td>
                </tr>
            </table>
            <!-- Un componente de tipo "panelGroup" es como un "div" de HTML. Se añade en este caso un componente de este tipo
            que se mostrará u ocultará en función de una lógica. -->
            <h:panelGroup rendered="#{vacanteForm.comentarioEnviado}">
                <table>
                    <tr>
                        <td><h:outputLabel for="comentario" value="#{msgs['vacanteForm.comentario']}" /></td>
                    </tr>
                    <tr>
                        <td><h:inputTextarea id="comentario" cols="50" rows="10" value="#{candidato.comentario}" /></td>
                    </tr>
                </table>

            </h:panelGroup>

            <!-- Se informa como valor de "action" el nombre de la página destino
            o como en este caso, un método que devolverá en función de una lógica,
            la página destino deseada. -->
            <h:commandButton action="#{vacanteForm.enviar()}" value="#{msgs['vacanteForm.enviar']}"></h:commandButton>
        </h:form>
    </body>
</html>
